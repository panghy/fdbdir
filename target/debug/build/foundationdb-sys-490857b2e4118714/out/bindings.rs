/* automatically generated by rust-bindgen 0.70.1 */

pub const FDB_API_VERSION: u32 = 730;
pub const FDB_LATEST_API_VERSION: u32 = 730;
pub const FDB_LATEST_BINDINGS_API_VERSION: u32 = 730;
pub const FDB_API_VERSION_CLIENT_TMP_DIR: u32 = 720;
pub const FDB_API_VERSION_DISABLE_CLIENT_BYPASS: u32 = 720;
pub const FDB_API_VERSION_TENANT_API_RELEASED: u32 = 720;
pub const __WORDSIZE: u32 = 64;
pub const __has_safe_buffers: u32 = 1;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_EXTSN: &[u8; 14] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_VERS_1050: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const __has_bounds_safety_attributes: u32 = 0;
pub const USE_CLANG_TYPES: u32 = 0;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub const FDBNetworkOption_FDB_NET_OPTION_LOCAL_ADDRESS: FDBNetworkOption = 10;
pub const FDBNetworkOption_FDB_NET_OPTION_CLUSTER_FILE: FDBNetworkOption = 20;
pub const FDBNetworkOption_FDB_NET_OPTION_TRACE_ENABLE: FDBNetworkOption = 30;
pub const FDBNetworkOption_FDB_NET_OPTION_TRACE_ROLL_SIZE: FDBNetworkOption = 31;
pub const FDBNetworkOption_FDB_NET_OPTION_TRACE_MAX_LOGS_SIZE: FDBNetworkOption = 32;
pub const FDBNetworkOption_FDB_NET_OPTION_TRACE_LOG_GROUP: FDBNetworkOption = 33;
pub const FDBNetworkOption_FDB_NET_OPTION_TRACE_FORMAT: FDBNetworkOption = 34;
pub const FDBNetworkOption_FDB_NET_OPTION_TRACE_CLOCK_SOURCE: FDBNetworkOption = 35;
pub const FDBNetworkOption_FDB_NET_OPTION_TRACE_FILE_IDENTIFIER: FDBNetworkOption = 36;
pub const FDBNetworkOption_FDB_NET_OPTION_TRACE_SHARE_AMONG_CLIENT_THREADS: FDBNetworkOption = 37;
pub const FDBNetworkOption_FDB_NET_OPTION_TRACE_INITIALIZE_ON_SETUP: FDBNetworkOption = 38;
pub const FDBNetworkOption_FDB_NET_OPTION_TRACE_PARTIAL_FILE_SUFFIX: FDBNetworkOption = 39;
pub const FDBNetworkOption_FDB_NET_OPTION_KNOB: FDBNetworkOption = 40;
pub const FDBNetworkOption_FDB_NET_OPTION_TLS_PLUGIN: FDBNetworkOption = 41;
pub const FDBNetworkOption_FDB_NET_OPTION_TLS_CERT_BYTES: FDBNetworkOption = 42;
pub const FDBNetworkOption_FDB_NET_OPTION_TLS_CERT_PATH: FDBNetworkOption = 43;
pub const FDBNetworkOption_FDB_NET_OPTION_TLS_KEY_BYTES: FDBNetworkOption = 45;
pub const FDBNetworkOption_FDB_NET_OPTION_TLS_KEY_PATH: FDBNetworkOption = 46;
pub const FDBNetworkOption_FDB_NET_OPTION_TLS_VERIFY_PEERS: FDBNetworkOption = 47;
pub const FDBNetworkOption_FDB_NET_OPTION_BUGGIFY_ENABLE: FDBNetworkOption = 48;
pub const FDBNetworkOption_FDB_NET_OPTION_BUGGIFY_DISABLE: FDBNetworkOption = 49;
pub const FDBNetworkOption_FDB_NET_OPTION_BUGGIFY_SECTION_ACTIVATED_PROBABILITY: FDBNetworkOption =
    50;
pub const FDBNetworkOption_FDB_NET_OPTION_BUGGIFY_SECTION_FIRED_PROBABILITY: FDBNetworkOption = 51;
pub const FDBNetworkOption_FDB_NET_OPTION_TLS_CA_BYTES: FDBNetworkOption = 52;
pub const FDBNetworkOption_FDB_NET_OPTION_TLS_CA_PATH: FDBNetworkOption = 53;
pub const FDBNetworkOption_FDB_NET_OPTION_TLS_PASSWORD: FDBNetworkOption = 54;
pub const FDBNetworkOption_FDB_NET_OPTION_DISABLE_MULTI_VERSION_CLIENT_API: FDBNetworkOption = 60;
pub const FDBNetworkOption_FDB_NET_OPTION_CALLBACKS_ON_EXTERNAL_THREADS: FDBNetworkOption = 61;
pub const FDBNetworkOption_FDB_NET_OPTION_EXTERNAL_CLIENT_LIBRARY: FDBNetworkOption = 62;
pub const FDBNetworkOption_FDB_NET_OPTION_EXTERNAL_CLIENT_DIRECTORY: FDBNetworkOption = 63;
pub const FDBNetworkOption_FDB_NET_OPTION_DISABLE_LOCAL_CLIENT: FDBNetworkOption = 64;
pub const FDBNetworkOption_FDB_NET_OPTION_CLIENT_THREADS_PER_VERSION: FDBNetworkOption = 65;
pub const FDBNetworkOption_FDB_NET_OPTION_FUTURE_VERSION_CLIENT_LIBRARY: FDBNetworkOption = 66;
pub const FDBNetworkOption_FDB_NET_OPTION_RETAIN_CLIENT_LIBRARY_COPIES: FDBNetworkOption = 67;
pub const FDBNetworkOption_FDB_NET_OPTION_IGNORE_EXTERNAL_CLIENT_FAILURES: FDBNetworkOption = 68;
pub const FDBNetworkOption_FDB_NET_OPTION_FAIL_INCOMPATIBLE_CLIENT: FDBNetworkOption = 69;
pub const FDBNetworkOption_FDB_NET_OPTION_DISABLE_CLIENT_STATISTICS_LOGGING: FDBNetworkOption = 70;
pub const FDBNetworkOption_FDB_NET_OPTION_ENABLE_SLOW_TASK_PROFILING: FDBNetworkOption = 71;
pub const FDBNetworkOption_FDB_NET_OPTION_ENABLE_RUN_LOOP_PROFILING: FDBNetworkOption = 71;
pub const FDBNetworkOption_FDB_NET_OPTION_DISABLE_CLIENT_BYPASS: FDBNetworkOption = 72;
pub const FDBNetworkOption_FDB_NET_OPTION_CLIENT_BUGGIFY_ENABLE: FDBNetworkOption = 80;
pub const FDBNetworkOption_FDB_NET_OPTION_CLIENT_BUGGIFY_DISABLE: FDBNetworkOption = 81;
pub const FDBNetworkOption_FDB_NET_OPTION_CLIENT_BUGGIFY_SECTION_ACTIVATED_PROBABILITY:
    FDBNetworkOption = 82;
pub const FDBNetworkOption_FDB_NET_OPTION_CLIENT_BUGGIFY_SECTION_FIRED_PROBABILITY:
    FDBNetworkOption = 83;
pub const FDBNetworkOption_FDB_NET_OPTION_DISTRIBUTED_CLIENT_TRACER: FDBNetworkOption = 90;
pub const FDBNetworkOption_FDB_NET_OPTION_CLIENT_TMP_DIR: FDBNetworkOption = 91;
pub const FDBNetworkOption_FDB_NET_OPTION_SUPPORTED_CLIENT_VERSIONS: FDBNetworkOption = 1000;
pub const FDBNetworkOption_FDB_NET_OPTION_EXTERNAL_CLIENT: FDBNetworkOption = 1001;
pub const FDBNetworkOption_FDB_NET_OPTION_EXTERNAL_CLIENT_TRANSPORT_ID: FDBNetworkOption = 1002;
pub type FDBNetworkOption = ::std::os::raw::c_uint;
pub const FDBDatabaseOption_FDB_DB_OPTION_LOCATION_CACHE_SIZE: FDBDatabaseOption = 10;
pub const FDBDatabaseOption_FDB_DB_OPTION_MAX_WATCHES: FDBDatabaseOption = 20;
pub const FDBDatabaseOption_FDB_DB_OPTION_MACHINE_ID: FDBDatabaseOption = 21;
pub const FDBDatabaseOption_FDB_DB_OPTION_DATACENTER_ID: FDBDatabaseOption = 22;
pub const FDBDatabaseOption_FDB_DB_OPTION_SNAPSHOT_RYW_ENABLE: FDBDatabaseOption = 26;
pub const FDBDatabaseOption_FDB_DB_OPTION_SNAPSHOT_RYW_DISABLE: FDBDatabaseOption = 27;
pub const FDBDatabaseOption_FDB_DB_OPTION_TRANSACTION_LOGGING_MAX_FIELD_LENGTH: FDBDatabaseOption =
    405;
pub const FDBDatabaseOption_FDB_DB_OPTION_TRANSACTION_TIMEOUT: FDBDatabaseOption = 500;
pub const FDBDatabaseOption_FDB_DB_OPTION_TRANSACTION_RETRY_LIMIT: FDBDatabaseOption = 501;
pub const FDBDatabaseOption_FDB_DB_OPTION_TRANSACTION_MAX_RETRY_DELAY: FDBDatabaseOption = 502;
pub const FDBDatabaseOption_FDB_DB_OPTION_TRANSACTION_SIZE_LIMIT: FDBDatabaseOption = 503;
pub const FDBDatabaseOption_FDB_DB_OPTION_TRANSACTION_CAUSAL_READ_RISKY: FDBDatabaseOption = 504;
pub const FDBDatabaseOption_FDB_DB_OPTION_TRANSACTION_INCLUDE_PORT_IN_ADDRESS: FDBDatabaseOption =
    505;
pub const FDBDatabaseOption_FDB_DB_OPTION_TRANSACTION_AUTOMATIC_IDEMPOTENCY: FDBDatabaseOption =
    506;
pub const FDBDatabaseOption_FDB_DB_OPTION_TRANSACTION_BYPASS_UNREADABLE: FDBDatabaseOption = 700;
pub const FDBDatabaseOption_FDB_DB_OPTION_TRANSACTION_USED_DURING_COMMIT_PROTECTION_DISABLE:
    FDBDatabaseOption = 701;
pub const FDBDatabaseOption_FDB_DB_OPTION_TRANSACTION_REPORT_CONFLICTING_KEYS: FDBDatabaseOption =
    702;
pub const FDBDatabaseOption_FDB_DB_OPTION_USE_CONFIG_DATABASE: FDBDatabaseOption = 800;
pub const FDBDatabaseOption_FDB_DB_OPTION_TEST_CAUSAL_READ_RISKY: FDBDatabaseOption = 900;
pub type FDBDatabaseOption = ::std::os::raw::c_uint;
pub const FDBTransactionOption_FDB_TR_OPTION_CAUSAL_WRITE_RISKY: FDBTransactionOption = 10;
pub const FDBTransactionOption_FDB_TR_OPTION_CAUSAL_READ_RISKY: FDBTransactionOption = 20;
pub const FDBTransactionOption_FDB_TR_OPTION_CAUSAL_READ_DISABLE: FDBTransactionOption = 21;
pub const FDBTransactionOption_FDB_TR_OPTION_INCLUDE_PORT_IN_ADDRESS: FDBTransactionOption = 23;
pub const FDBTransactionOption_FDB_TR_OPTION_NEXT_WRITE_NO_WRITE_CONFLICT_RANGE:
    FDBTransactionOption = 30;
pub const FDBTransactionOption_FDB_TR_OPTION_COMMIT_ON_FIRST_PROXY: FDBTransactionOption = 40;
pub const FDBTransactionOption_FDB_TR_OPTION_CHECK_WRITES_ENABLE: FDBTransactionOption = 50;
pub const FDBTransactionOption_FDB_TR_OPTION_READ_YOUR_WRITES_DISABLE: FDBTransactionOption = 51;
pub const FDBTransactionOption_FDB_TR_OPTION_READ_AHEAD_DISABLE: FDBTransactionOption = 52;
pub const FDBTransactionOption_FDB_TR_OPTION_READ_SERVER_SIDE_CACHE_ENABLE: FDBTransactionOption =
    507;
pub const FDBTransactionOption_FDB_TR_OPTION_READ_SERVER_SIDE_CACHE_DISABLE: FDBTransactionOption =
    508;
pub const FDBTransactionOption_FDB_TR_OPTION_READ_PRIORITY_NORMAL: FDBTransactionOption = 509;
pub const FDBTransactionOption_FDB_TR_OPTION_READ_PRIORITY_LOW: FDBTransactionOption = 510;
pub const FDBTransactionOption_FDB_TR_OPTION_READ_PRIORITY_HIGH: FDBTransactionOption = 511;
pub const FDBTransactionOption_FDB_TR_OPTION_DURABILITY_DATACENTER: FDBTransactionOption = 110;
pub const FDBTransactionOption_FDB_TR_OPTION_DURABILITY_RISKY: FDBTransactionOption = 120;
pub const FDBTransactionOption_FDB_TR_OPTION_DURABILITY_DEV_NULL_IS_WEB_SCALE:
    FDBTransactionOption = 130;
pub const FDBTransactionOption_FDB_TR_OPTION_PRIORITY_SYSTEM_IMMEDIATE: FDBTransactionOption = 200;
pub const FDBTransactionOption_FDB_TR_OPTION_PRIORITY_BATCH: FDBTransactionOption = 201;
pub const FDBTransactionOption_FDB_TR_OPTION_INITIALIZE_NEW_DATABASE: FDBTransactionOption = 300;
pub const FDBTransactionOption_FDB_TR_OPTION_ACCESS_SYSTEM_KEYS: FDBTransactionOption = 301;
pub const FDBTransactionOption_FDB_TR_OPTION_READ_SYSTEM_KEYS: FDBTransactionOption = 302;
pub const FDBTransactionOption_FDB_TR_OPTION_RAW_ACCESS: FDBTransactionOption = 303;
pub const FDBTransactionOption_FDB_TR_OPTION_BYPASS_STORAGE_QUOTA: FDBTransactionOption = 304;
pub const FDBTransactionOption_FDB_TR_OPTION_DEBUG_DUMP: FDBTransactionOption = 400;
pub const FDBTransactionOption_FDB_TR_OPTION_DEBUG_RETRY_LOGGING: FDBTransactionOption = 401;
pub const FDBTransactionOption_FDB_TR_OPTION_TRANSACTION_LOGGING_ENABLE: FDBTransactionOption = 402;
pub const FDBTransactionOption_FDB_TR_OPTION_DEBUG_TRANSACTION_IDENTIFIER: FDBTransactionOption =
    403;
pub const FDBTransactionOption_FDB_TR_OPTION_LOG_TRANSACTION: FDBTransactionOption = 404;
pub const FDBTransactionOption_FDB_TR_OPTION_TRANSACTION_LOGGING_MAX_FIELD_LENGTH:
    FDBTransactionOption = 405;
pub const FDBTransactionOption_FDB_TR_OPTION_SERVER_REQUEST_TRACING: FDBTransactionOption = 406;
pub const FDBTransactionOption_FDB_TR_OPTION_TIMEOUT: FDBTransactionOption = 500;
pub const FDBTransactionOption_FDB_TR_OPTION_RETRY_LIMIT: FDBTransactionOption = 501;
pub const FDBTransactionOption_FDB_TR_OPTION_MAX_RETRY_DELAY: FDBTransactionOption = 502;
pub const FDBTransactionOption_FDB_TR_OPTION_SIZE_LIMIT: FDBTransactionOption = 503;
pub const FDBTransactionOption_FDB_TR_OPTION_IDEMPOTENCY_ID: FDBTransactionOption = 504;
pub const FDBTransactionOption_FDB_TR_OPTION_AUTOMATIC_IDEMPOTENCY: FDBTransactionOption = 505;
pub const FDBTransactionOption_FDB_TR_OPTION_SNAPSHOT_RYW_ENABLE: FDBTransactionOption = 600;
pub const FDBTransactionOption_FDB_TR_OPTION_SNAPSHOT_RYW_DISABLE: FDBTransactionOption = 601;
pub const FDBTransactionOption_FDB_TR_OPTION_LOCK_AWARE: FDBTransactionOption = 700;
pub const FDBTransactionOption_FDB_TR_OPTION_USED_DURING_COMMIT_PROTECTION_DISABLE:
    FDBTransactionOption = 701;
pub const FDBTransactionOption_FDB_TR_OPTION_READ_LOCK_AWARE: FDBTransactionOption = 702;
pub const FDBTransactionOption_FDB_TR_OPTION_FIRST_IN_BATCH: FDBTransactionOption = 710;
pub const FDBTransactionOption_FDB_TR_OPTION_USE_PROVISIONAL_PROXIES: FDBTransactionOption = 711;
pub const FDBTransactionOption_FDB_TR_OPTION_REPORT_CONFLICTING_KEYS: FDBTransactionOption = 712;
pub const FDBTransactionOption_FDB_TR_OPTION_SPECIAL_KEY_SPACE_RELAXED: FDBTransactionOption = 713;
pub const FDBTransactionOption_FDB_TR_OPTION_SPECIAL_KEY_SPACE_ENABLE_WRITES: FDBTransactionOption =
    714;
pub const FDBTransactionOption_FDB_TR_OPTION_TAG: FDBTransactionOption = 800;
pub const FDBTransactionOption_FDB_TR_OPTION_AUTO_THROTTLE_TAG: FDBTransactionOption = 801;
pub const FDBTransactionOption_FDB_TR_OPTION_SPAN_PARENT: FDBTransactionOption = 900;
pub const FDBTransactionOption_FDB_TR_OPTION_EXPENSIVE_CLEAR_COST_ESTIMATION_ENABLE:
    FDBTransactionOption = 1000;
pub const FDBTransactionOption_FDB_TR_OPTION_BYPASS_UNREADABLE: FDBTransactionOption = 1100;
pub const FDBTransactionOption_FDB_TR_OPTION_USE_GRV_CACHE: FDBTransactionOption = 1101;
pub const FDBTransactionOption_FDB_TR_OPTION_SKIP_GRV_CACHE: FDBTransactionOption = 1102;
pub const FDBTransactionOption_FDB_TR_OPTION_AUTHORIZATION_TOKEN: FDBTransactionOption = 2000;
pub type FDBTransactionOption = ::std::os::raw::c_uint;
pub const FDBStreamingMode_FDB_STREAMING_MODE_WANT_ALL: FDBStreamingMode = -2;
pub const FDBStreamingMode_FDB_STREAMING_MODE_ITERATOR: FDBStreamingMode = -1;
pub const FDBStreamingMode_FDB_STREAMING_MODE_EXACT: FDBStreamingMode = 0;
pub const FDBStreamingMode_FDB_STREAMING_MODE_SMALL: FDBStreamingMode = 1;
pub const FDBStreamingMode_FDB_STREAMING_MODE_MEDIUM: FDBStreamingMode = 2;
pub const FDBStreamingMode_FDB_STREAMING_MODE_LARGE: FDBStreamingMode = 3;
pub const FDBStreamingMode_FDB_STREAMING_MODE_SERIAL: FDBStreamingMode = 4;
pub type FDBStreamingMode = ::std::os::raw::c_int;
pub const FDBMutationType_FDB_MUTATION_TYPE_ADD: FDBMutationType = 2;
pub const FDBMutationType_FDB_MUTATION_TYPE_AND: FDBMutationType = 6;
pub const FDBMutationType_FDB_MUTATION_TYPE_BIT_AND: FDBMutationType = 6;
pub const FDBMutationType_FDB_MUTATION_TYPE_OR: FDBMutationType = 7;
pub const FDBMutationType_FDB_MUTATION_TYPE_BIT_OR: FDBMutationType = 7;
pub const FDBMutationType_FDB_MUTATION_TYPE_XOR: FDBMutationType = 8;
pub const FDBMutationType_FDB_MUTATION_TYPE_BIT_XOR: FDBMutationType = 8;
pub const FDBMutationType_FDB_MUTATION_TYPE_APPEND_IF_FITS: FDBMutationType = 9;
pub const FDBMutationType_FDB_MUTATION_TYPE_MAX: FDBMutationType = 12;
pub const FDBMutationType_FDB_MUTATION_TYPE_MIN: FDBMutationType = 13;
pub const FDBMutationType_FDB_MUTATION_TYPE_SET_VERSIONSTAMPED_KEY: FDBMutationType = 14;
pub const FDBMutationType_FDB_MUTATION_TYPE_SET_VERSIONSTAMPED_VALUE: FDBMutationType = 15;
pub const FDBMutationType_FDB_MUTATION_TYPE_BYTE_MIN: FDBMutationType = 16;
pub const FDBMutationType_FDB_MUTATION_TYPE_BYTE_MAX: FDBMutationType = 17;
pub const FDBMutationType_FDB_MUTATION_TYPE_COMPARE_AND_CLEAR: FDBMutationType = 20;
pub type FDBMutationType = ::std::os::raw::c_uint;
pub const FDBConflictRangeType_FDB_CONFLICT_RANGE_TYPE_READ: FDBConflictRangeType = 0;
pub const FDBConflictRangeType_FDB_CONFLICT_RANGE_TYPE_WRITE: FDBConflictRangeType = 1;
pub type FDBConflictRangeType = ::std::os::raw::c_uint;
pub const FDBErrorPredicate_FDB_ERROR_PREDICATE_RETRYABLE: FDBErrorPredicate = 50000;
pub const FDBErrorPredicate_FDB_ERROR_PREDICATE_MAYBE_COMMITTED: FDBErrorPredicate = 50001;
pub const FDBErrorPredicate_FDB_ERROR_PREDICATE_RETRYABLE_NOT_COMMITTED: FDBErrorPredicate = 50002;
pub type FDBErrorPredicate = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FDB_future {
    _unused: [u8; 0],
}
pub type FDBFuture = FDB_future;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FDB_result {
    _unused: [u8; 0],
}
pub type FDBResult = FDB_result;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FDB_cluster {
    _unused: [u8; 0],
}
pub type FDBCluster = FDB_cluster;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FDB_database {
    _unused: [u8; 0],
}
pub type FDBDatabase = FDB_database;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FDB_tenant {
    _unused: [u8; 0],
}
pub type FDBTenant = FDB_tenant;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FDB_transaction {
    _unused: [u8; 0],
}
pub type FDBTransaction = FDB_transaction;
pub type fdb_error_t = ::std::os::raw::c_int;
pub type fdb_bool_t = ::std::os::raw::c_int;
extern "C" {
    pub fn fdb_get_error(code: fdb_error_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn fdb_error_predicate(
        predicate_test: ::std::os::raw::c_int,
        code: fdb_error_t,
    ) -> fdb_bool_t;
}
extern "C" {
    pub fn fdb_network_set_option(
        option: FDBNetworkOption,
        value: *const u8,
        value_length: ::std::os::raw::c_int,
    ) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_setup_network() -> fdb_error_t;
}
extern "C" {
    pub fn fdb_run_network() -> fdb_error_t;
}
extern "C" {
    pub fn fdb_stop_network() -> fdb_error_t;
}
extern "C" {
    pub fn fdb_add_network_thread_completion_hook(
        hook: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        hook_parameter: *mut ::std::os::raw::c_void,
    ) -> fdb_error_t;
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct key {
    pub key: *const u8,
    pub key_length: ::std::os::raw::c_int,
}
pub type FDBKey = key;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct keyvalue {
    pub key: *const u8,
    pub key_length: ::std::os::raw::c_int,
    pub value: *const u8,
    pub value_length: ::std::os::raw::c_int,
}
pub type FDBKeyValue = keyvalue;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct keyselector {
    pub key: FDBKey,
    pub orEqual: fdb_bool_t,
    pub offset: ::std::os::raw::c_int,
}
pub type FDBKeySelector = keyselector;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct getrangereqandresult {
    pub begin: FDBKeySelector,
    pub end: FDBKeySelector,
    pub data: *mut FDBKeyValue,
    pub m_size: ::std::os::raw::c_int,
    pub m_capacity: ::std::os::raw::c_int,
}
pub type FDBGetRangeReqAndResult = getrangereqandresult;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mappedkeyvalue {
    pub key: FDBKey,
    pub value: FDBKey,
    pub getRange: FDBGetRangeReqAndResult,
    pub buffer: [::std::os::raw::c_uchar; 32usize],
}
pub type FDBMappedKeyValue = mappedkeyvalue;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct keyrange {
    pub begin_key: *const u8,
    pub begin_key_length: ::std::os::raw::c_int,
    pub end_key: *const u8,
    pub end_key_length: ::std::os::raw::c_int,
}
pub type FDBKeyRange = keyrange;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct granulesummary {
    pub key_range: FDBKeyRange,
    pub snapshot_version: i64,
    pub snapshot_size: i64,
    pub delta_version: i64,
    pub delta_size: i64,
}
pub type FDBGranuleSummary = granulesummary;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct readgranulecontext {
    pub userContext: *mut ::std::os::raw::c_void,
    pub start_load_f: ::std::option::Option<
        unsafe extern "C" fn(
            filename: *const ::std::os::raw::c_char,
            filenameLength: ::std::os::raw::c_int,
            offset: i64,
            length: i64,
            fullFileLength: i64,
            context: *mut ::std::os::raw::c_void,
        ) -> i64,
    >,
    pub get_load_f: ::std::option::Option<
        unsafe extern "C" fn(loadId: i64, context: *mut ::std::os::raw::c_void) -> *mut u8,
    >,
    pub free_load_f: ::std::option::Option<
        unsafe extern "C" fn(loadId: i64, context: *mut ::std::os::raw::c_void),
    >,
    pub debugNoMaterialize: fdb_bool_t,
    pub granuleParallelism: ::std::os::raw::c_int,
}
pub type FDBReadBlobGranuleContext = readgranulecontext;
pub const FDBBGMutationType_FDB_BG_MUTATION_TYPE_SET_VALUE: FDBBGMutationType = 0;
pub const FDBBGMutationType_FDB_BG_MUTATION_TYPE_CLEAR_RANGE: FDBBGMutationType = 1;
pub type FDBBGMutationType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bgtenantprefix {
    pub present: fdb_bool_t,
    pub prefix: FDBKey,
}
pub type FDBBGTenantPrefix = bgtenantprefix;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct bgencryptionkey {
    pub domain_id: i64,
    pub base_key_id: u64,
    pub base_kcv: u32,
    pub random_salt: u64,
    pub base_key: FDBKey,
}
pub type FDBBGEncryptionKey = bgencryptionkey;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bgencryptionctx {
    pub present: fdb_bool_t,
    pub textKey: FDBBGEncryptionKey,
    pub textKCV: u32,
    pub headerKey: FDBBGEncryptionKey,
    pub headerKCV: u32,
    pub iv: FDBKey,
}
pub type FDBBGEncryptionCtx = bgencryptionctx;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct bgfilepointer {
    pub filename_ptr: *const u8,
    pub filename_length: ::std::os::raw::c_int,
    pub file_offset: i64,
    pub file_length: i64,
    pub full_file_length: i64,
    pub file_version: i64,
    pub encryption_ctx: FDBBGEncryptionCtx,
}
pub type FDBBGFilePointer = bgfilepointer;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct bgmutation {
    pub type_: u8,
    pub version: i64,
    pub param1_ptr: *const u8,
    pub param1_length: ::std::os::raw::c_int,
    pub param2_ptr: *const u8,
    pub param2_length: ::std::os::raw::c_int,
}
pub type FDBBGMutation = bgmutation;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct bgfiledescription {
    pub key_range: FDBKeyRange,
    pub snapshot_present: fdb_bool_t,
    pub snapshot_file_pointer: FDBBGFilePointer,
    pub delta_file_count: ::std::os::raw::c_int,
    pub delta_files: *mut FDBBGFilePointer,
    pub memory_mutation_count: ::std::os::raw::c_int,
    pub memory_mutations: *mut FDBBGMutation,
    pub tenant_prefix: FDBBGTenantPrefix,
}
pub type FDBBGFileDescription = bgfiledescription;
extern "C" {
    pub fn fdb_future_cancel(f: *mut FDBFuture);
}
extern "C" {
    pub fn fdb_future_release_memory(f: *mut FDBFuture);
}
extern "C" {
    pub fn fdb_future_destroy(f: *mut FDBFuture);
}
extern "C" {
    pub fn fdb_future_block_until_ready(f: *mut FDBFuture) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_future_is_ready(f: *mut FDBFuture) -> fdb_bool_t;
}
pub type FDBCallback = ::std::option::Option<
    unsafe extern "C" fn(future: *mut FDBFuture, callback_parameter: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn fdb_future_set_callback(
        f: *mut FDBFuture,
        callback: FDBCallback,
        callback_parameter: *mut ::std::os::raw::c_void,
    ) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_future_get_error(f: *mut FDBFuture) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_future_get_bool(f: *mut FDBFuture, out: *mut fdb_bool_t) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_future_get_int64(f: *mut FDBFuture, out: *mut i64) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_future_get_uint64(f: *mut FDBFuture, out: *mut u64) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_future_get_double(f: *mut FDBFuture, out: *mut f64) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_future_get_key(
        f: *mut FDBFuture,
        out_key: *mut *const u8,
        out_key_length: *mut ::std::os::raw::c_int,
    ) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_future_get_value(
        f: *mut FDBFuture,
        out_present: *mut fdb_bool_t,
        out_value: *mut *const u8,
        out_value_length: *mut ::std::os::raw::c_int,
    ) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_future_get_keyvalue_array(
        f: *mut FDBFuture,
        out_kv: *mut *const FDBKeyValue,
        out_count: *mut ::std::os::raw::c_int,
        out_more: *mut fdb_bool_t,
    ) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_future_get_mappedkeyvalue_array(
        f: *mut FDBFuture,
        out_kv: *mut *const FDBMappedKeyValue,
        out_count: *mut ::std::os::raw::c_int,
        out_more: *mut fdb_bool_t,
    ) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_future_get_key_array(
        f: *mut FDBFuture,
        out_key_array: *mut *const FDBKey,
        out_count: *mut ::std::os::raw::c_int,
    ) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_future_get_string_array(
        f: *mut FDBFuture,
        out_strings: *mut *mut *const ::std::os::raw::c_char,
        out_count: *mut ::std::os::raw::c_int,
    ) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_future_get_keyrange_array(
        f: *mut FDBFuture,
        out_ranges: *mut *const FDBKeyRange,
        out_count: *mut ::std::os::raw::c_int,
    ) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_future_get_granule_summary_array(
        f: *mut FDBFuture,
        out_summaries: *mut *const FDBGranuleSummary,
        out_count: *mut ::std::os::raw::c_int,
    ) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_future_readbg_get_descriptions(
        f: *mut FDBFuture,
        out: *mut *mut FDBBGFileDescription,
        desc_count: *mut ::std::os::raw::c_int,
    ) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_readbg_parse_snapshot_file(
        file_data: *const u8,
        file_len: ::std::os::raw::c_int,
        tenant_prefix: *const FDBBGTenantPrefix,
        encryption_ctx: *const FDBBGEncryptionCtx,
    ) -> *mut FDBResult;
}
extern "C" {
    pub fn fdb_readbg_parse_delta_file(
        file_data: *const u8,
        file_len: ::std::os::raw::c_int,
        tenant_prefix: *const FDBBGTenantPrefix,
        encryption_ctx: *const FDBBGEncryptionCtx,
    ) -> *mut FDBResult;
}
extern "C" {
    pub fn fdb_result_destroy(r: *mut FDBResult);
}
extern "C" {
    pub fn fdb_result_get_keyvalue_array(
        r: *mut FDBResult,
        out_kv: *mut *const FDBKeyValue,
        out_count: *mut ::std::os::raw::c_int,
        out_more: *mut fdb_bool_t,
    ) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_result_get_bg_mutations_array(
        r: *mut FDBResult,
        out_mutations: *mut *const FDBBGMutation,
        out_count: *mut ::std::os::raw::c_int,
    ) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_create_database(
        cluster_file_path: *const ::std::os::raw::c_char,
        out_database: *mut *mut FDBDatabase,
    ) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_create_database_from_connection_string(
        connection_string: *const ::std::os::raw::c_char,
        out_database: *mut *mut FDBDatabase,
    ) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_database_destroy(d: *mut FDBDatabase);
}
extern "C" {
    pub fn fdb_database_set_option(
        d: *mut FDBDatabase,
        option: FDBDatabaseOption,
        value: *const u8,
        value_length: ::std::os::raw::c_int,
    ) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_database_open_tenant(
        d: *mut FDBDatabase,
        tenant_name: *const u8,
        tenant_name_length: ::std::os::raw::c_int,
        out_tenant: *mut *mut FDBTenant,
    ) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_database_create_transaction(
        d: *mut FDBDatabase,
        out_transaction: *mut *mut FDBTransaction,
    ) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_database_reboot_worker(
        db: *mut FDBDatabase,
        address: *const u8,
        address_length: ::std::os::raw::c_int,
        check: fdb_bool_t,
        duration: ::std::os::raw::c_int,
    ) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_database_force_recovery_with_data_loss(
        db: *mut FDBDatabase,
        dcid: *const u8,
        dcid_length: ::std::os::raw::c_int,
    ) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_database_create_snapshot(
        db: *mut FDBDatabase,
        uid: *const u8,
        uid_length: ::std::os::raw::c_int,
        snap_command: *const u8,
        snap_command_length: ::std::os::raw::c_int,
    ) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_database_get_main_thread_busyness(db: *mut FDBDatabase) -> f64;
}
extern "C" {
    pub fn fdb_database_get_server_protocol(
        db: *mut FDBDatabase,
        expected_version: u64,
    ) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_database_purge_blob_granules(
        db: *mut FDBDatabase,
        begin_key_name: *const u8,
        begin_key_name_length: ::std::os::raw::c_int,
        end_key_name: *const u8,
        end_key_name_length: ::std::os::raw::c_int,
        purge_version: i64,
        force: fdb_bool_t,
    ) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_database_wait_purge_granules_complete(
        db: *mut FDBDatabase,
        purge_key_name: *const u8,
        purge_key_name_length: ::std::os::raw::c_int,
    ) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_database_blobbify_range(
        db: *mut FDBDatabase,
        begin_key_name: *const u8,
        begin_key_name_length: ::std::os::raw::c_int,
        end_key_name: *const u8,
        end_key_name_length: ::std::os::raw::c_int,
    ) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_database_blobbify_range_blocking(
        db: *mut FDBDatabase,
        begin_key_name: *const u8,
        begin_key_name_length: ::std::os::raw::c_int,
        end_key_name: *const u8,
        end_key_name_length: ::std::os::raw::c_int,
    ) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_database_unblobbify_range(
        db: *mut FDBDatabase,
        begin_key_name: *const u8,
        begin_key_name_length: ::std::os::raw::c_int,
        end_key_name: *const u8,
        end_key_name_length: ::std::os::raw::c_int,
    ) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_database_list_blobbified_ranges(
        db: *mut FDBDatabase,
        begin_key_name: *const u8,
        begin_key_name_length: ::std::os::raw::c_int,
        end_key_name: *const u8,
        end_key_name_length: ::std::os::raw::c_int,
        rangeLimit: ::std::os::raw::c_int,
    ) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_database_verify_blob_range(
        db: *mut FDBDatabase,
        begin_key_name: *const u8,
        begin_key_name_length: ::std::os::raw::c_int,
        end_key_name: *const u8,
        end_key_name_length: ::std::os::raw::c_int,
        version: i64,
    ) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_database_flush_blob_range(
        db: *mut FDBDatabase,
        begin_key_name: *const u8,
        begin_key_name_length: ::std::os::raw::c_int,
        end_key_name: *const u8,
        end_key_name_length: ::std::os::raw::c_int,
        compact: fdb_bool_t,
        version: i64,
    ) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_database_get_client_status(db: *mut FDBDatabase) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_tenant_create_transaction(
        tenant: *mut FDBTenant,
        out_transaction: *mut *mut FDBTransaction,
    ) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_tenant_purge_blob_granules(
        db: *mut FDBTenant,
        begin_key_name: *const u8,
        begin_key_name_length: ::std::os::raw::c_int,
        end_key_name: *const u8,
        end_key_name_length: ::std::os::raw::c_int,
        purge_version: i64,
        force: fdb_bool_t,
    ) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_tenant_wait_purge_granules_complete(
        db: *mut FDBTenant,
        purge_key_name: *const u8,
        purge_key_name_length: ::std::os::raw::c_int,
    ) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_tenant_blobbify_range(
        tenant: *mut FDBTenant,
        begin_key_name: *const u8,
        begin_key_name_length: ::std::os::raw::c_int,
        end_key_name: *const u8,
        end_key_name_length: ::std::os::raw::c_int,
    ) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_tenant_blobbify_range_blocking(
        tenant: *mut FDBTenant,
        begin_key_name: *const u8,
        begin_key_name_length: ::std::os::raw::c_int,
        end_key_name: *const u8,
        end_key_name_length: ::std::os::raw::c_int,
    ) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_tenant_unblobbify_range(
        tenant: *mut FDBTenant,
        begin_key_name: *const u8,
        begin_key_name_length: ::std::os::raw::c_int,
        end_key_name: *const u8,
        end_key_name_length: ::std::os::raw::c_int,
    ) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_tenant_list_blobbified_ranges(
        tenant: *mut FDBTenant,
        begin_key_name: *const u8,
        begin_key_name_length: ::std::os::raw::c_int,
        end_key_name: *const u8,
        end_key_name_length: ::std::os::raw::c_int,
        rangeLimit: ::std::os::raw::c_int,
    ) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_tenant_verify_blob_range(
        tenant: *mut FDBTenant,
        begin_key_name: *const u8,
        begin_key_name_length: ::std::os::raw::c_int,
        end_key_name: *const u8,
        end_key_name_length: ::std::os::raw::c_int,
        version: i64,
    ) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_tenant_flush_blob_range(
        tenant: *mut FDBTenant,
        begin_key_name: *const u8,
        begin_key_name_length: ::std::os::raw::c_int,
        end_key_name: *const u8,
        end_key_name_length: ::std::os::raw::c_int,
        compact: fdb_bool_t,
        version: i64,
    ) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_tenant_get_id(tenant: *mut FDBTenant) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_tenant_destroy(tenant: *mut FDBTenant);
}
extern "C" {
    pub fn fdb_transaction_destroy(tr: *mut FDBTransaction);
}
extern "C" {
    pub fn fdb_transaction_cancel(tr: *mut FDBTransaction);
}
extern "C" {
    pub fn fdb_transaction_set_option(
        tr: *mut FDBTransaction,
        option: FDBTransactionOption,
        value: *const u8,
        value_length: ::std::os::raw::c_int,
    ) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_transaction_set_read_version(tr: *mut FDBTransaction, version: i64);
}
extern "C" {
    pub fn fdb_transaction_get_read_version(tr: *mut FDBTransaction) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_transaction_get(
        tr: *mut FDBTransaction,
        key_name: *const u8,
        key_name_length: ::std::os::raw::c_int,
        snapshot: fdb_bool_t,
    ) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_transaction_get_key(
        tr: *mut FDBTransaction,
        key_name: *const u8,
        key_name_length: ::std::os::raw::c_int,
        or_equal: fdb_bool_t,
        offset: ::std::os::raw::c_int,
        snapshot: fdb_bool_t,
    ) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_transaction_get_addresses_for_key(
        tr: *mut FDBTransaction,
        key_name: *const u8,
        key_name_length: ::std::os::raw::c_int,
    ) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_transaction_get_range(
        tr: *mut FDBTransaction,
        begin_key_name: *const u8,
        begin_key_name_length: ::std::os::raw::c_int,
        begin_or_equal: fdb_bool_t,
        begin_offset: ::std::os::raw::c_int,
        end_key_name: *const u8,
        end_key_name_length: ::std::os::raw::c_int,
        end_or_equal: fdb_bool_t,
        end_offset: ::std::os::raw::c_int,
        limit: ::std::os::raw::c_int,
        target_bytes: ::std::os::raw::c_int,
        mode: FDBStreamingMode,
        iteration: ::std::os::raw::c_int,
        snapshot: fdb_bool_t,
        reverse: fdb_bool_t,
    ) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_transaction_get_mapped_range(
        tr: *mut FDBTransaction,
        begin_key_name: *const u8,
        begin_key_name_length: ::std::os::raw::c_int,
        begin_or_equal: fdb_bool_t,
        begin_offset: ::std::os::raw::c_int,
        end_key_name: *const u8,
        end_key_name_length: ::std::os::raw::c_int,
        end_or_equal: fdb_bool_t,
        end_offset: ::std::os::raw::c_int,
        mapper_name: *const u8,
        mapper_name_length: ::std::os::raw::c_int,
        limit: ::std::os::raw::c_int,
        target_bytes: ::std::os::raw::c_int,
        mode: FDBStreamingMode,
        iteration: ::std::os::raw::c_int,
        snapshot: fdb_bool_t,
        reverse: fdb_bool_t,
    ) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_transaction_set(
        tr: *mut FDBTransaction,
        key_name: *const u8,
        key_name_length: ::std::os::raw::c_int,
        value: *const u8,
        value_length: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn fdb_transaction_atomic_op(
        tr: *mut FDBTransaction,
        key_name: *const u8,
        key_name_length: ::std::os::raw::c_int,
        param: *const u8,
        param_length: ::std::os::raw::c_int,
        operation_type: FDBMutationType,
    );
}
extern "C" {
    pub fn fdb_transaction_clear(
        tr: *mut FDBTransaction,
        key_name: *const u8,
        key_name_length: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn fdb_transaction_clear_range(
        tr: *mut FDBTransaction,
        begin_key_name: *const u8,
        begin_key_name_length: ::std::os::raw::c_int,
        end_key_name: *const u8,
        end_key_name_length: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn fdb_transaction_watch(
        tr: *mut FDBTransaction,
        key_name: *const u8,
        key_name_length: ::std::os::raw::c_int,
    ) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_transaction_commit(tr: *mut FDBTransaction) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_transaction_get_committed_version(
        tr: *mut FDBTransaction,
        out_version: *mut i64,
    ) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_transaction_get_tag_throttled_duration(tr: *mut FDBTransaction) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_transaction_get_total_cost(tr: *mut FDBTransaction) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_transaction_get_approximate_size(tr: *mut FDBTransaction) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_transaction_get_versionstamp(tr: *mut FDBTransaction) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_transaction_on_error(tr: *mut FDBTransaction, error: fdb_error_t) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_transaction_reset(tr: *mut FDBTransaction);
}
extern "C" {
    pub fn fdb_transaction_add_conflict_range(
        tr: *mut FDBTransaction,
        begin_key_name: *const u8,
        begin_key_name_length: ::std::os::raw::c_int,
        end_key_name: *const u8,
        end_key_name_length: ::std::os::raw::c_int,
        type_: FDBConflictRangeType,
    ) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_transaction_get_estimated_range_size_bytes(
        tr: *mut FDBTransaction,
        begin_key_name: *const u8,
        begin_key_name_length: ::std::os::raw::c_int,
        end_key_name: *const u8,
        end_key_name_length: ::std::os::raw::c_int,
    ) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_transaction_get_range_split_points(
        tr: *mut FDBTransaction,
        begin_key_name: *const u8,
        begin_key_name_length: ::std::os::raw::c_int,
        end_key_name: *const u8,
        end_key_name_length: ::std::os::raw::c_int,
        chunk_size: i64,
    ) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_transaction_get_blob_granule_ranges(
        tr: *mut FDBTransaction,
        begin_key_name: *const u8,
        begin_key_name_length: ::std::os::raw::c_int,
        end_key_name: *const u8,
        end_key_name_length: ::std::os::raw::c_int,
        rangeLimit: ::std::os::raw::c_int,
    ) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_transaction_read_blob_granules(
        tr: *mut FDBTransaction,
        begin_key_name: *const u8,
        begin_key_name_length: ::std::os::raw::c_int,
        end_key_name: *const u8,
        end_key_name_length: ::std::os::raw::c_int,
        beginVersion: i64,
        readVersion: i64,
        granuleContext: FDBReadBlobGranuleContext,
    ) -> *mut FDBResult;
}
extern "C" {
    pub fn fdb_transaction_summarize_blob_granules(
        tr: *mut FDBTransaction,
        begin_key_name: *const u8,
        begin_key_name_length: ::std::os::raw::c_int,
        end_key_name: *const u8,
        end_key_name_length: ::std::os::raw::c_int,
        summaryVersion: i64,
        rangeLimit: ::std::os::raw::c_int,
    ) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_transaction_read_blob_granules_description(
        tr: *mut FDBTransaction,
        begin_key_name: *const u8,
        begin_key_name_length: ::std::os::raw::c_int,
        end_key_name: *const u8,
        end_key_name_length: ::std::os::raw::c_int,
        begin_version: i64,
        read_version: i64,
        read_version_out: *mut i64,
    ) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_select_api_version_impl(
        runtime_version: ::std::os::raw::c_int,
        header_version: ::std::os::raw::c_int,
    ) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_get_max_api_version() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdb_get_client_version() -> *const ::std::os::raw::c_char;
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
